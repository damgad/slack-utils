// Generated by CoffeeScript 1.4.0
(function() {
  var data, getChannels, getUsers, listToHash, request;

  request = require('request');

  listToHash = function(list, keyName, innerKey) {
    var hash, item, _i, _len;
    list = list[keyName];
    hash = {};
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      if (innerKey != null) {
        hash[item.id] = item[innerKey];
      } else {
        hash[item.id] = item;
      }
    }
    return hash;
  };

  data = {};

  getUsers = function(token) {
    return request.get({
      url: "https://slack.com/api/users.list?token=" + token,
      json: true
    }, function(err, res, users) {
      if (err) {
        throw err;
      }
      data['users.simple'] = listToHash(users, "members", "name");
      return data['users'] = listToHash(users, "members");
    });
  };

  getChannels = function(token) {
    return request.get({
      url: "https://slack.com/api/channels.list?token=" + token,
      json: true
    }, function(err, res, channels) {
      if (err) {
        throw err;
      }
      data['channels.simple'] = listToHash(channels, "channels", "name");
      return data['channels'] = listToHash(channels, "channels");
    });
  };

  module.exports = function(API_TOKEN, HOOK_URL) {
    if (API_TOKEN != null) {
      getUsers(API_TOKEN);
      getChannels(API_TOKEN);
    }
    return {
      postMessage: function(message, channel, nick, icon, attachments) {
        data = {
          text: message,
          parse: "full",
          attachments: attachments
        };
        if ((icon != null) && (icon.slice(0, 8) === 'https://' || icon.slice(0, 7) === 'http://')) {
          data.icon_url = icon;
        } else if ((icon != null) && !icon.match(/^\:\w*\:$/)) {
          data.icon_emoji = ":" + icon + ":";
        } else if ((icon != null) && icon.match(/^\:\w*\:$/)) {
          data.icon_emoji = icon;
        }
        if (channel != null) {
          data.channel = "#" + channel;
        }
        if (nick != null) {
          data.username = nick;
        }
        return request.post({
          url: HOOK_URL,
          json: data
        });
      },
      sendMessage: function(message, to, as) {
        return request.post({
          url: HOOK_URL,
          json: {
            text: message,
            username: as,
            parse: "full",
            channel: "@" + to
          }
        });
      },
      listToHash: listToHash,
      parseMessage: function(message) {
        return message.replace("<!channel>", "@channel").replace("<!group>", "@group").replace("<!everyone>", "@everyone").replace(/<#(C\w*)>/g, function(match, channelId) {
          return "#" + data['channels.simple'][channelId];
        }).replace(/<@(U\w*)>/g, function(match, userId) {
          return "@" + data['users.simple'][userId];
        }).replace(/<(\S*)>/g, function(match, link) {
          return link;
        });
      },
      userInfoById: function(search_id) {
        var id, info, _ref;
        _ref = data['users'];
        for (id in _ref) {
          info = _ref[id];
          if (search_id === id) {
            return info;
          }
        }
      },
      userInfoByName: function(username) {
        var id, info, _ref;
        _ref = data['users'];
        for (id in _ref) {
          info = _ref[id];
          if (info['name'] === username) {
            return info;
          }
        }
      }
    };
  };

}).call(this);
